#!/usr/bin/env groovy

// Access the environment variable REPO_HOME
def repo_home = System.getenv('REPO_HOME')
if (!repo_home) {
    println "Error: REPO_HOME is not set."
    System.exit(1)
}

def version = "0.1"

def release_dir = "${repo_home}/user/Ariadne_${version}"
def release_dir_file = new File(release_dir)
if (!release_dir_file.exists()) {
    release_dir_file.mkdirs()
}

// Function to use 'install' command for copying and setting permissions
def install_file(source_fp, target_dp, perms) {
    def target_file = "${target_dp}/${new File(source_fp).name}"
    def cmd = ["install", "-m", perms, source_fp, target_file]
    def process = cmd.execute()
    process.waitFor()
    if (process.exitValue() != 0) {
        println "Error: Failed to install ${new File(source_fp).name} to ${target_dp}"
        println process.err.text
        System.exit(1)
    }
    println "Installed ${new File(source_fp).name} to ${target_dp} with permissions ${perms}"
}

def build_fp = "${repo_home}/developer/groovy/build"
def ariadne_class_files = new File("${repo_home}/developer/groovyc").listFiles().findAll {
    it.name.startsWith("AriadneGraph") && it.name.endsWith(".class")
}

// Install the build script
install_file(build_fp, release_dir, "ug+r,ug+x")

// Install all matching class files
ariadne_class_files.each { class_file ->
    install_file(class_file.absolutePath, release_dir, "ug+r")
}

println "Release version ${version} completed at $release_dir"
