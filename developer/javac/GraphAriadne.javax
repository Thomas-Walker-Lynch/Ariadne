package com.ReasoningTechnology.Ariadne;

import java.util.HashMap;
import java.util.Map;

public class AriadnaGraph extends Graph{

  /*--------------------------------------------------------------------------------
    constructors
  */

  public Graph(Map<Label ,Node> node_map ,ProductionList recognizer_f_list){

  }

  /*--------------------------------------------------------------------------------
   instance data 
  */

  private static boolean debug = true;

  /*--------------------------------------------------------------------------------
    About nodes

    A leaf type node specifies a path to a file that should not be deleted by
    in clean operations. Typically this is the source code. We could add a
    tool to lock permissions on these before a build, so that the build
    scripts will also not mess with them (unless they change permissions).

    If the user has multiple dependency graphs defined, a node with no
    dependencies in one graph, might have dependencies in another.

    An error type node, is one that was found to not have a type, or
    was constructed by the tool to be a place older, perhaps for a
    node label that was not found.

  */
  public static TokenSet all_node_type_set = new TokenSet();
  static {
    all_node_type_set.add(new Token("symbol"));
    all_node_type_set.add(new Token("path"));
    all_node_type_set.add(new Token("leaf"));
    all_node_type_set.add(new Token("error"));
  }

  public static TokenSet persistent_node_mark_set = new TokenSet();
  static {
    persistent_node_mark_set.add(new Token("cycle_member"));
    persistent_node_mark_set.add(new Token("wellformed"));
    persistent_node_mark_set.add(new Token("build_failed"));
    persistent_node_mark_set.add(new Token("null_node"));
  }

  public static boolean leaf_q(Node node){
    return node != null && "leaf".equals(node.get("type"));
  }

  public static boolean has_mark(Node node){
    return node != null && node.get("mark") != null && !( (TokenSet)node.get("mark") ).isEmpty();
  }

  public static void set_mark(Node node ,Token mark){
    if( node.get("mark") == null ){
      node.put("mark" ,new HashTokenSet());
    }
    ( (TokenSet)node.get("mark") ).add(mark);
  }

  public static void clear_mark(Node node ,Token mark){
    if( node != null && node.get("mark") != null ){
      ( (TokenSet) node.get("mark") ).remove(mark);
    }
  }

  public static boolean marked_good_q(Node node){
    return node != null && node.get("mark") != null
      && ( (TokenSet)node.get("mark") ).contains("wellformed")
      && !( (TokenSet)node.get("mark") ).contains("cycle_member")
      && !( (TokenSet)node.get("mark") ).contains("build_failed");
  }

  /*--------------------------------------------------------------------------------
   Well-formed Node Check
  */

  public static TokenSet form_condition_set = new TokenSet();
  static {
    form_condition_set.add(new Token("no_node"));
    form_condition_set.add(new Token("node_must_have_label"));
    form_condition_set.add(new Token("label_must_be_string"));
    form_condition_set.add(new Token("node_must_have_type"));
    form_condition_set.add(new Token("bad_node_type"));
    form_condition_set.add(new Token("neighbor_value_must_be_list"));
    form_condition_set.add(new Token("neighbor_reference_must_be_string"));
    form_condition_set.add(new Token("neighbor_label_not_in_graph"));
    form_condition_set.add(new Token("mark_property_value_must_be_set"));
    form_condition_set.add(new Token("unregistered_mark"));
    form_condition_set.add(new Token("missing_required_build_code"));
    form_condition_set.add(new Token("leaf_given_neighbor_property"));
    form_condition_set.add(new Token("leaf_given_build_property"));
  }

  // given a node, collects a description of its form, returns a set form condition tokens
  public static TokenSet wellformed_node_q(Node node){
    TokenSet form_error_set = new HashSet<>();

    if(node == null){
      form_error_set.add("null_node");
      return form_error_set;
    }

    if( !node.containsKey("label") )
      form_error_set.add("node_must_have_label");
    else if( !(node.get("label") instanceof Label) )
      form_error_set.add("label_must_be_string");

    if( !node.containsKey("type") )
      form_error_set.add("node_must_have_type");
    else if( !(node.get("type") instanceof String) || !all_node_type_set.contains(node.get("type")) )
      form_error_set.add("bad_node_type");

    if( node.containsKey("neighbor") ){
      if( !(node.get("neighbor") instanceof List) )
        form_error_set.add("neighbor_value_must_be_list");
      else if( !((List<?>) node.get("neighbor")).stream().allMatch(it -> it instanceof Label) )
        form_error_set.add("neighbor_reference_must_be_string");
    }

    if( node.containsKey("mark") ){
      if( !(node.get("mark") instanceof Set) )
        form_error_set.add("mark_property_value_must_be_set");
      else if( !((Set<?>) node.get("mark")).stream().allMatch(it -> persistent_node_mark_set.contains(it)) )
        form_error_set.add("unregistered_mark");
    }

    if( "path".equals(node.get("type")) && (!node.containsKey("build") || !(node.get("build") instanceof Runnable)) )
      form_error_set.add("missing_required_build_code");

    if( "leaf".equals(node.get("type")) ){
      if( node.containsKey("neighbor") ) form_error_set.add("leaf_given_neighbor_property");
      if( node.containsKey("build") ) form_error_set.add("leaf_given_build_property");
    }

    return form_error_set;
  }

  // given a node, potentially marks it as wellformed, returns one of 'wellformed' or 'malformed'
  public static Token wellformed_mark_node(Node node ,boolean verbose){
    if(debug){
      if(node != null){
        System.out.println("wellformed_mark_node::node: " + node);
      }else{
        System.out.println("wellformed_mark_node given a null node");
      }
    }

    TokenSet form_errors = wellformed_node_q(node);
    if( form_errors.isEmpty() ){
      set_mark( node ,"wellformed" );
      return "wellformed";
    }

    // At this point we know that form_errors is not empty
    if(verbose){
      if( node != null && node.get("label") != null && ((Label)node.get("label")).length() > 0 ){
        System.out.print( "node " + node.get("label") + " is malformed due to:" );
      }else{
        System.out.print("anonymous node is malformed due to:");
      }
      for(Token error : form_errors){
        System.out.print(" " + error);
      }
      System.out.println("");
    }

    return "malformed";
  }
  public Token wellformed_mark_node(Node node){
    return wellformed_mark_node(node ,true);
  }

  // given a node_label, potentially marks the corresponding node as 'wellformed', returns a token set.
  // Tokens included "undefined_node", "malformed", and "defactor_leaf".
  public TokenSet wellformed_mark_node_label(Label node_label ,boolean verbose){
    TokenSet ret_value = new HashSet<>();
    Node node = super.lookup(node_label);
    if(node == null){
      ret_value.add("undefined_node");
      return ret_value;
    }
    if( "malformed".equals(wellformed_mark_node(node ,verbose)) ){
      ret_value.add("malformed");
    }
    if( ((List<?>)node.get("neighbor")).isEmpty() ){
      ret_value.add("defacto_leaf"); // might not be `type:leaf`
    }
    return ret_value;
  }
  public TokenSet wellformed_mark_node_label(Label node_label){
    return wellformed_mark_node_label(node_label ,true);
  }

  /*--------------------------------------------------------------------------------
   A well formed graph checker.  Traverses entire graph and marks nodes
   that are not well formed or that are part of a cycle.

   This must be run on the graph for `lookup_marked_good` to work.

   Each node_label must be a string and not empty.

   Subleties here because we have not yet determined if the nodes we are
   wellformed (after all ,that is what we are determining here).

   If we want to attempt to build 'islands' of things that might be located on
   the far side of cycles ,then modify the cycle finder to return a list of
   cycles (i.e. a list of lists) ,then use each of cycle definition (a list) as
   the root nodes for further search.

   `path_stack` is a stack of LabelList. The first entry is a clone of the list of
   root nodes, referenced by label. Each subsequent list is a clone of the
   neighbor list of the leftmost node of the prior entry.

   `path` is a list of the left most nodes, referenced by label, of the entries
   on the path stack. This is the path to our current location in the tree.
  */


  private boolean find_and_remove_cycle(List<LabelList> path_stack ,LabelList path ,boolean verbose){

    if( path.size() <= 1 ) return false; // 0 or 1 length path can't have a cycle

    // we want to know if the most recent node added to the path occurs at a point earlier
    // in the path.
    int rightmost_index = path.size() - 1;
    Label recent_node_label = path.get( rightmost_index );
    int cycle_start_index = path.indexOf(recent_node_label);
    if( cycle_start_index == -1 ){
      System.err.println("find_and_remove_cycle:: indexOf does not find index of known list member");
      return false;
    }
    Boolean has_cycle =  cycle_start_index < rightmost_index;
    if(!has_cycle) return false;

    if(verbose) System.out.print("mark_form_graph_descend:: dependency cycle found:");
    for( Label cycle_node_label : path.subList(cycle_start_index ,path.size()) ){
      if(verbose) System.out.print(" " + cycle_node_label);
      Node cycle_node = super.lookup(cycle_node_label);
      if( cycle_node.get("mark") == null ){
        cycle_node.put( "mark" ,new HashTokenSet() );
      }
      ( (TokenSet)cycle_node.get("mark") ).add("cycle_member");
    }
    if(verbose) System.out.println("");

    // We cannot continue searching after the loop, so we pop back to treat
    // the first node in the loop as though a leaf node.
    path_stack.subList( cycle_start_index + 1 ,path_stack.size() ).clear();

    return true;
  }

  private static TokenSet mark_form_graph_descend_set = new TokenSet();
  static {
    mark_form_graph_descend_set.add(new Token("empty_path_stack"));
    mark_form_graph_descend_set.add(new Token("cycle_found"));
    mark_form_graph_descend_set.add(new Token("undefined_node"));
    mark_form_graph_descend_set.add(new Token("exists_malformed"));
    mark_form_graph_descend_set.add(new Token("defacto_leaf"));
  }

  private TokenSet mark_form_graph_descend( List<LabelList> path_stack ,boolean verbose ){
    TokenSet ret_value = new HashSet<>();
    if(path_stack.isEmpty()){
      if(verbose) System.out.println( "mark_form_graph_descend:: given empty path_stack to descend from" );
      ret_value.add( "empty_path_stack" );
      return ret_value;
    }

    LabelList local_path = new ArrayList<>();
    for(LabelList path : path_stack){
      local_path.add( path.get(0) );
    }
    Label local_node_label = local_path.get( local_path.size() - 1 );
  
    do{
      
      if( find_and_remove_cycle(path_stack ,local_path ,verbose) ){
        ret_value.add("cycle_found");
        return ret_value;
      }

      TokenSet wellformed_mark_node_label_result = wellformed_mark_node_label(local_node_label ,verbose);
      ret_value.addAll( wellformed_mark_node_label_result );
      if( 
         wellformed_mark_node_label_result.contains("undefined_node") 
         || wellformed_mark_node_label_result.contains("defacto_leaf") 
      ){
        return ret_value;
      }

      // Descend further into the tree.
      path_stack.add( new ArrayList<>((LabelList) super.lookup(local_node_label).get("neighbor")) );
      local_node_label = (LabelList)super.lookup(local_node_label).get("neighbor").get(0);
      local_path.add(local_node_label);

    }while(true);
  }

   
  /*
    Given root_node_label_list, marks up the graph and returns a set possibly
    containing 'all_wellformed' and 'cycles_exist'.

    Marks potentially added to each node include 'cycle_member' and 'wellformed'.
    Note that these marks are independent.
  */
  public TokenSet mark_form_graph(LabelList root_node_label_list ,boolean verbose){
    TokenSet ret_value = new HashSet<>();
    boolean exists_malformed = false;
    TokenSet result; // used variously

    if( root_node_label_list.isEmpty() ) return ret_value;

    // Initialize the DFS tree iterator.
    List<LabelList> path_stack = new ArrayList<>();
    path_stack.add( new ArrayList<>(root_node_label_list) );

    // iterate over left side tree descent, not ideal as it starts at the
    // root each time, but avoids complexity in the cycle detection logic.
    do{
      result = mark_form_graph_descend(path_stack ,verbose);
      if( result.contains("cycle_found") ) ret_value.add("cycle_exists");
      if( result.contains("undefined_node") ) exists_malformed = true;
      if( result.contains("exists_malformed") ) exists_malformed = true;

      // increment the iterator to the next leftmost path
      LabelList top_list = path_stack.get( path_stack.size() - 1 );
      top_list.remove(0);
      if( top_list.isEmpty() ) path_stack.remove( path_stack.size() - 1 );

    }while( !path_stack.isEmpty() );

    if( !exists_malformed ) ret_value.add("all_wellformed");

    if( verbose ){
      if( exists_malformed ) System.out.println("one or more malformed nodes were found");
      boolean exists_cycle = ret_value.contains("cycle_exists");
      if( exists_cycle ) System.out.println("one or more cyclic dependency loop found");
      if( exists_malformed || exists_cycle ) System.out.println("will attempt to build unaffected nodes");
    }

    return ret_value;
  }
  public TokenSet mark_form_graph(LabelList root_node_label_list){
    return mark_form_graph(root_node_label_list ,true);
  }

  /*--------------------------------------------------------------------------------
    Graph traversal
  */

  // Lookup method to find a node by its label
  public Node lookup(Label node_label ,boolean verbose){
    Node node = super.lookup(node_label ,verbose);
    if(node != null && marked_good_q(node)) return node;
    return null;
  }

  // Overloaded lookup method with default verbosity (true)
  public Node lookup(Label node_label){
    return lookup(node_label ,true);
  }



}
