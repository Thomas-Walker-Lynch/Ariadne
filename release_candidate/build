#!/usr/bin/env groovy

// Function to load the graph class dynamically
def include_a_class( a_class_fp ){
  def class_loader = this.class.classLoader
  try{
    return class_loader.loadClass(a_class_fp)
  } catch(Exception e){
    return null
  }
}

// Main build function for the Shell UI
def build(graph_definition_fp){
  // Load the graph class dynamically
  def graph_definition_class = include_a_class(graph_definition_fp)
  if(graph_definition_class){
    println "build:: loaded ${graph_definition_fp}.class"
  } else{
    println "build:: failed to load ${graph_definition_fp}.class"
    System.exit(1)
  }

  // Get the node_map and node_f_list from the graph class
  def node_map = graph_definition_class.get_node_map()
  def node_f_list = graph_definition_class.get_node_f_list()
  // println "node_map: ${node_map}"
  // println "node_f_list: ${node_f_list}"

  graph = new AriadneGraph(node_map ,node_f_list)

  // Call the build function in AriadneGraph
  //  AriadneGraph.run_build_scripts_f(node_map ,node_f_list)
}

// Entry point for the script
if(args.length == 0){
  println "Usage: ./build <graph_definition.class>"
  System.exit(1)
}

def graph_definition_fp = args[0]
build( graph_definition_fp )
