package com.ReasoningTechnology.Ariadne.TestBench;

/*
Component smoke test. At least call each method of each class.

*/


import  com.ReasoningTechnology.Ariadne.*;
import  com.ReasoningTechnology.TestBench.*;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.HashMap;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;


public class Test2 extends TestBench{

  public static boolean test_File_unpack_file_path_0(){
    boolean[] conditions = new boolean[5];
    int i = 0;
        
    // Test input
    String test_fp = "/home/user/test.txt";
        
    // Expected output
    String expected_dp = "/home/user/";
    String expected_fn = "test.txt";
    String expected_fn_base = "test";
    String expected_fn_ext = "txt";

    // Actual output
    Map<String, String> result = File.unpack_file_path( test_fp );
        
    conditions[i++] = result.get("dp").equals( expected_dp );
    conditions[i++] = result.get("fn").equals( expected_fn );
    conditions[i++] = result.get("fn_base").equals( expected_fn_base );
    conditions[i++] = result.get("fn_ext").equals( expected_fn_ext );
    conditions[i++] = result.size() == 4;

    // Return true if all conditions are met
    return all( conditions );
  }

  public static boolean test_Label_0(){
    boolean[] conditions = new boolean[2];
    int i = 0;

    // Test input
    Label test_label = new Label("test");

    // Expected output
    String expected_value = "test";

    // Actual output
    conditions[i++] = test_label.get().equals(expected_value);
    conditions[i++] = test_label.toString().equals(expected_value);

    return all(conditions);
  }

  public static boolean test_Token_0(){
    boolean[] conditions = new boolean[4];
    int i = 0;

    // Test input
    Token token = new Token("test_value");

    // Check if the value is correctly stored and retrieved
    conditions[i++] = token.get().equals("test_value");

    // Check if the string representation is correct
    conditions[i++] = token.toString().equals("test_value");

    // Check equality with another Token object with the same value
    Token another_token = new Token("test_value");
    conditions[i++] = token.equals( another_token );

    // Check the hashCode consistency
    conditions[i++] = token.hashCode() == another_token.hashCode();

    return all(conditions);
  }

  public static boolean test_LabelList_0(){
    LabelList label_list = new LabelList();  // Use the constructor

    // Add a label and check the size
    label_list.add(new Label("test"));
    return label_list.size() == 1;
  }

  public static boolean test_Node_0(){
    Node node = new Node();  // Use the constructor
    node.put("key", new Object());
    return node.containsKey("key");
  }

  public static boolean test_NodeList_0(){
    NodeList node_list = new NodeList();  // Use the constructor

    // Add a node and check the size
    node_list.add(new Node());  // Use Node constructor
    return node_list.size() == 1;
  }

  public static boolean test_Production_0(){
    Production production = label -> new Node();  // Use the Node constructor

    // Apply the production function
    Node node = production.apply(new Label("test"));
    return node != null;
  }

  public static boolean test_ProductionList_0(){
    ProductionList production_list = new ProductionList();  // Use the constructor

    // Add a production and check the size
    production_list.add(label -> new Node());  // Use the Node constructor
    return production_list.size() == 1;
  }

  public static boolean test_TokenSet_0(){
    TokenSet token_set = new TokenSet();  // Use the constructor

    // Add a token and check if it's contained in the set
    token_set.add(new Token("test"));
    return token_set.contains(new Token("test"));
  }

  public static boolean test_Graph_0() {
    boolean[] conditions = new boolean[3];
    int i = 0;

    // Create an empty node map and a production list
    Map<Label, Node> node_map = new HashMap<>();
    ProductionList production_list = new ProductionList();

    // Initialize the Graph
    Graph graph = new Graph(node_map, production_list);

    // Test that lookup returns null for a non-existent node
    Label non_existent_label = new Label("non_existent");
    conditions[i++] = graph.lookup(non_existent_label, false) == null;

    // Add a node to the map and test lookup
    Node test_node = new Node();
    Label test_label = new Label("test");
    node_map.put(test_label, test_node);
    conditions[i++] = graph.lookup(test_label, false) == test_node;

    // Test lookup with verbosity
    conditions[i++] = graph.lookup(test_label).equals(test_node);

    // Return true if all conditions are met
    return all(conditions);
  }
 
  public static boolean test_Util_print_list_0(){
    boolean[] conditions = new boolean[1];
    int i = 0;

    String prefix = "Test List:";
    List<String> items = new ArrayList<>();
    items.add("item1");
    items.add("item2");
    items.add("item3");

    String expectedOutput = "Test List: 'item1', 'item2', 'item3'.\n";

    ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    PrintStream originalOut = System.out;
    System.setOut(new PrintStream(outContent));

    // Use a StringBuilder to gather debug messages
    StringBuilder debugMessages = new StringBuilder();

    /*
    try {
      Util.print_list(prefix, items);
      String result = outContent.toString();
    
      // Gather debug messages
      debugMessages.append("Captured output: ").append(result).append("\n");
      debugMessages.append("Expected output: ").append(expectedOutput).append("\n");
    
      conditions[i++] = result.equals(expectedOutput);
    } catch (Exception e) {
      conditions[i++] = false;
    } finally {
      System.setOut(originalOut);  // Restore System.out
        
      // Now print the gathered debug messages
      System.out.print(debugMessages.toString());
    }
    */

    try {
      Util.print_list(prefix, items);
      String result = outContent.toString();
      conditions[i++] = result.equals(expectedOutput);
    } catch (Exception e) {
      conditions[i++] = false;
    } finally {
      System.setOut(originalOut);
    }

    return all(conditions);
  }


  // Method to run all tests
  public static void test_Ariadne(){
    Map<String, Boolean> test_map = new HashMap<>();

    // Adding tests to the map
    test_map.put( "test_File_unpack_file_path_0", test_File_unpack_file_path_0() );
    test_map.put( "test_Label_0", test_Label_0() );
    test_map.put( "test_Token_0", test_Label_0() );
    test_map.put( "test_LabelList_0", test_LabelList_0() );
    test_map.put( "test_Node_0", test_Node_0() );
    test_map.put( "test_NodeList_0", test_NodeList_0() );
    test_map.put( "test_Production_0", test_Production_0() );
    test_map.put( "test_ProductionList_0", test_ProductionList_0() );
    test_map.put( "test_TokenSet_0", test_TokenSet_0() );
    test_map.put("test_Graph_0", test_Graph_0());
    test_map.put("test_Util_print_list_0", test_Util_print_list_0());

    // Run the tests using TestBench
    TestBench.run( test_map );
  }

  // Main function to provide a shell interface for running tests
  public static void main(String[] args){
    System.out.println("Running Ariadne tests...");
    test_Ariadne(); // Calls the method to run all tests
  }

}

