#!/usr/bin/env groovy

// Function to load the graph class dynamically
def include_graph_class( graph_class_fp ) {
    def class_loader = this.class.classLoader
    try {
        def graph_class = class_loader.loadClass(graph_class_fp)
        println "Successfully loaded class: ${graph_class}"
        return graph_class.newInstance()
    } catch (Exception e) {
        println "Error loading class: ${e.message}"
        e.printStackTrace()
        System.exit(1)
    }
}

// Main build function for the Shell UI
def build( graph_class_fp ) {
    // Load the graph class dynamically
    def graph_class = include_graph_class( graph_class_fp )

    // Get the node_map and node_f_list from the graph class
    def node_map = graph_class.get_node_map()
    def node_f_list = graph_class.get_node_f_list()

    // Log the result
    println "node_map: ${node_map}"
    println "node_f_list: ${node_f_list}"

    // Check if node_map and node_f_list are defined
    if( !(node_map instanceof Map)  || !(node_f_list instanceof List) ){
        println "Error: Graph definition must define both 'node_map' and 'node_f_list'"
        System.exit(1)
    }

  
    // Call the build function in AriadneGraph
    AriadneGraph.run_build_scripts_f( node_map ,node_f_list )
}

// Entry point for the script
if( args.length == 0 ){
    println "Usage: ./build <graph_class_definition>"
    System.exit(1)
}

def graph_class_fp = args[0]
build( graph_class_fp )
