#!/usr/bin/env groovy

def include_ariadne_library(){

  // Get the directory where this script is located
  def script_dp = new File(getClass().protectionDomain.codeSource.location.path).parent
  def ariadne_lib_fp = new File(script_dp ,"Ariadne.groovy")

  if(!ariadne_lib_fp.exists()){
    println "Error: Ariadne library not found in ${script_dp}"
    System.exit(1)
  }

  return ariadne_lib_fp.text
}


// Main build function for the Shell UI
def build(graph_fp){
  // Check if the graph definition exists
  def graph_fn = new File(graph_fp)
  if(!graph_fn.exists()){
    println "Error: Graph definition file not found: $graph_fp"
    System.exit(1)
  }

  // Prepare the binding and shell for evaluation
  def binding = new Binding()
  def shell = new GroovyShell(binding)

  // Load the graph definition into the shell
  shell.evaluate(graph_fn.text)

  // Check if node_map and node_f_list are defined as local variables
  if (!binding.variables.containsKey('node_map') || !binding.variables.containsKey('node_f_list')) {
    println "Error: Graph definition must define both 'node_map' and 'node_f_list'"
    System.exit(1)
  }

  // Load the Ariadne library functions
  shell.evaluate(include_ariadne_library())

  // Call the build function in Ariadne.groovy
  run_build_scripts(binding.getVariable('node_map'), binding.getVariable('node_f_list'))
}

// Entry point for the script
if(args.length == 0){
  println "Usage: ./shellUI.groovy <graph_definition>"
  System.exit(1)
}

def graph_fp = args[0]
build(graph_fp)
